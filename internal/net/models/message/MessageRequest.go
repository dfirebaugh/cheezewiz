// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package message

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type MessageRequest struct {
	_tab flatbuffers.Table
}

func GetRootAsMessageRequest(buf []byte, offset flatbuffers.UOffsetT) *MessageRequest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &MessageRequest{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *MessageRequest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *MessageRequest) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *MessageRequest) Uid() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MessageRequest) Body() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MessageRequest) Source() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MessageRequest) Destination() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func MessageRequestStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func MessageRequestAddUid(builder *flatbuffers.Builder, uid flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(uid), 0)
}
func MessageRequestAddBody(builder *flatbuffers.Builder, body flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(body), 0)
}
func MessageRequestAddSource(builder *flatbuffers.Builder, source flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(source), 0)
}
func MessageRequestAddDestination(builder *flatbuffers.Builder, destination flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(destination), 0)
}
func MessageRequestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
