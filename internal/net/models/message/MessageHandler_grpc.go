//Generated by gRPC Go plugin
//If you make any local changes, they will be lost
//source: message

package message

import "github.com/google/flatbuffers/go"

import (
  context "context"
  grpc "google.golang.org/grpc"
)

// Client API for MessageHandler service
type MessageHandlerClient interface{
  PublishMessage(ctx context.Context, in *flatbuffers.Builder, 
  	opts... grpc.CallOption) (* MessageReply, error)  
  SubscribeMessage(ctx context.Context, in *flatbuffers.Builder, 
  	opts... grpc.CallOption) (MessageHandler_SubscribeMessageClient, error)  
}

type messageHandlerClient struct {
  cc *grpc.ClientConn
}

func NewMessageHandlerClient(cc *grpc.ClientConn) MessageHandlerClient {
  return &messageHandlerClient{cc}
}

func (c *messageHandlerClient) PublishMessage(ctx context.Context, in *flatbuffers.Builder, 
	opts... grpc.CallOption) (* MessageReply, error) {
  out := new(MessageReply)
  err := grpc.Invoke(ctx, "/message.MessageHandler/PublishMessage", in, out, c.cc, opts...)
  if err != nil { return nil, err }
  return out, nil
}

func (c *messageHandlerClient) SubscribeMessage(ctx context.Context, in *flatbuffers.Builder, 
	opts... grpc.CallOption) (MessageHandler_SubscribeMessageClient, error) {
  stream, err := grpc.NewClientStream(ctx, &_MessageHandler_serviceDesc.Streams[0], c.cc, "/message.MessageHandler/SubscribeMessage", opts...)
  if err != nil { return nil, err }
  x := &messageHandlerSubscribeMessageClient{stream}
  if err := x.ClientStream.SendMsg(in); err != nil { return nil, err }
  if err := x.ClientStream.CloseSend(); err != nil { return nil, err }
  return x,nil
}

type MessageHandler_SubscribeMessageClient interface {
  Recv() (*MessageReply, error)
  grpc.ClientStream
}

type messageHandlerSubscribeMessageClient struct{
  grpc.ClientStream
}

func (x *messageHandlerSubscribeMessageClient) Recv() (*MessageReply, error) {
  m := new(MessageReply)
  if err := x.ClientStream.RecvMsg(m); err != nil { return nil, err }
  return m, nil
}

// Server API for MessageHandler service
type MessageHandlerServer interface {
  PublishMessage(context.Context, *MessageRequest) (*flatbuffers.Builder, error)  
  SubscribeMessage(*MessageRequest, MessageHandler_SubscribeMessageServer) error  
}

func RegisterMessageHandlerServer(s *grpc.Server, srv MessageHandlerServer) {
  s.RegisterService(&_MessageHandler_serviceDesc, srv)
}

func _MessageHandler_PublishMessage_Handler(srv interface{}, ctx context.Context,
	dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
  in := new(MessageRequest)
  if err := dec(in); err != nil { return nil, err }
  if interceptor == nil { return srv.(MessageHandlerServer).PublishMessage(ctx, in) }
  info := &grpc.UnaryServerInfo{
    Server: srv,
    FullMethod: "/message.MessageHandler/PublishMessage",
  }
  
  handler := func(ctx context.Context, req interface{}) (interface{}, error) {
    return srv.(MessageHandlerServer).PublishMessage(ctx, req.(* MessageRequest))
  }
  return interceptor(ctx, in, info, handler)
}


func _MessageHandler_SubscribeMessage_Handler(srv interface{}, stream grpc.ServerStream) error {
  m := new(MessageRequest)
  if err := stream.RecvMsg(m); err != nil { return err }
  return srv.(MessageHandlerServer).SubscribeMessage(m, &messageHandlerSubscribeMessageServer{stream})
}

type MessageHandler_SubscribeMessageServer interface { 
  Send(* flatbuffers.Builder) error
  grpc.ServerStream
}

type messageHandlerSubscribeMessageServer struct {
  grpc.ServerStream
}

func (x *messageHandlerSubscribeMessageServer) Send(m *flatbuffers.Builder) error {
  return x.ServerStream.SendMsg(m)
}


var _MessageHandler_serviceDesc = grpc.ServiceDesc{
  ServiceName: "message.MessageHandler",
  HandlerType: (*MessageHandlerServer)(nil),
  Methods: []grpc.MethodDesc{
    {
      MethodName: "PublishMessage",
      Handler: _MessageHandler_PublishMessage_Handler, 
    },
  },
  Streams: []grpc.StreamDesc{
    {
      StreamName: "SubscribeMessage",
      Handler: _MessageHandler_SubscribeMessage_Handler, 
      ServerStreams: true,
    },
  },
}

